test_that("init_ecoextract_database creates database with required tables", {
  # Use withr for automatic cleanup
  db_path <- local_test_db()

  expect_true(file.exists(db_path))

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  withr::defer(DBI::dbDisconnect(con))

  tables <- DBI::dbListTables(con)
  expect_true("documents" %in% tables)
  expect_true("interactions" %in% tables)
  expect_true("processing_log" %in% tables)
})

test_that("init_ecoextract_database creates proper indexes", {
  # Use withr for automatic cleanup
  db_path <- local_test_db()

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  withr::defer(DBI::dbDisconnect(con))

  indexes <- DBI::dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type='index'")$name

  expect_true(any(grepl("idx_documents_hash", indexes)))
  expect_true(any(grepl("idx_interactions_document", indexes)))
  expect_true(any(grepl("idx_interactions_occurrence", indexes)))
})

test_that("init_ecoextract_database creates directory if needed", {
  temp_dir <- tempfile()
  db_path <- file.path(temp_dir, "subdir", "test.sqlite")
  on.exit(unlink(temp_dir, recursive = TRUE))

  init_ecoextract_database(db_path)

  expect_true(file.exists(db_path))
  expect_true(dir.exists(dirname(db_path)))
})

test_that("save_document_to_db inserts new document", {
  db_path <- local_test_db()

  test_file <- tempfile(fileext = ".pdf")
  writeLines("test content", test_file)
  on.exit(unlink(test_file), add = TRUE)

  metadata <- sample_publication_metadata()
  file_hash <- digest::digest(test_file, algo = "md5")

  doc_id <- save_document_to_db(db_path, test_file, file_hash, metadata)

  expect_true(is.numeric(doc_id))
  expect_true(doc_id > 0)

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  doc <- DBI::dbGetQuery(con, "SELECT * FROM documents WHERE id = ?", params = list(doc_id))
  expect_equal(nrow(doc), 1)
  expect_equal(doc$first_author_lastname, metadata$first_author_lastname)
  expect_equal(doc$publication_year, metadata$publication_year)
})

test_that("save_document_to_db returns existing ID for duplicate hash", {
  db_path <- local_test_db()
  

  test_file <- tempfile(fileext = ".pdf")
  writeLines("test content", test_file)
  on.exit(unlink(test_file), add = TRUE)

  file_hash <- digest::digest(test_file, algo = "md5")

  doc_id_1 <- save_document_to_db(db_path, test_file, file_hash, list())
  doc_id_2 <- save_document_to_db(db_path, test_file, file_hash, list())

  expect_equal(doc_id_1, doc_id_2)

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  count <- DBI::dbGetQuery(con, "SELECT COUNT(*) as n FROM documents WHERE file_hash = ?",
                           params = list(file_hash))$n
  expect_equal(count, 1)
})

test_that("save_records_to_db inserts interactions", {
  db_path <- local_test_db()
  

  # Create a document first
  test_file <- tempfile(fileext = ".pdf")
  writeLines("test", test_file)
  on.exit(unlink(test_file), add = TRUE)

  doc_id <- save_document_to_db(db_path, test_file, digest::digest(test_file), list())

  interactions <- sample_interactions()
  interactions$occurrence_id <- paste0("test-", 1:nrow(interactions))

  metadata <- list(model = "claude-test", prompt_hash = "abc123")
  result <- save_records_to_db(db_path, doc_id, interactions, metadata)

  expect_true(result)

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  saved <- DBI::dbGetQuery(con, "SELECT * FROM interactions WHERE document_id = ?",
                           params = list(doc_id))
  expect_equal(nrow(saved), nrow(interactions))
  expect_equal(saved$llm_model_version[1], "claude-test")
})

test_that("save_records_to_db handles empty dataframe", {
  db_path <- local_test_db()
  

  empty_df <- data.frame()
  result <- save_records_to_db(db_path, 1, empty_df, list())

  expect_true(result)
})

test_that("save_records_to_db serializes JSON arrays", {
  db_path <- local_test_db()
  

  test_file <- tempfile(fileext = ".pdf")
  writeLines("test", test_file)
  on.exit(unlink(test_file), add = TRUE)

  doc_id <- save_document_to_db(db_path, test_file, digest::digest(test_file), list())

  interactions <- data.frame(
    occurrence_id = "test-1",
    bat_species_scientific_name = "Test species",
    bat_species_common_name = "Test bat",
    all_supporting_source_sentences = I(list(c("sentence 1", "sentence 2"))),
    stringsAsFactors = FALSE
  )

  save_records_to_db(db_path, doc_id, interactions, list())

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  saved <- DBI::dbGetQuery(con, "SELECT all_supporting_source_sentences FROM interactions WHERE occurrence_id = 'test-1'")
  expect_type(saved$all_supporting_source_sentences, "character")
  expect_true(grepl("sentence 1", saved$all_supporting_source_sentences))
})

test_that("get_db_stats returns correct counts", {
  db_path <- local_test_db()
  

  stats <- get_db_stats(db_path)
  expect_equal(stats$documents, 0)
  expect_equal(stats$interactions, 0)

  # Add a document
  test_file <- tempfile(fileext = ".pdf")
  writeLines("test", test_file)
  on.exit(unlink(test_file), add = TRUE)

  doc_id <- save_document_to_db(db_path, test_file, digest::digest(test_file), list())

  stats <- get_db_stats(db_path)
  expect_equal(stats$documents, 1)
  expect_equal(stats$interactions, 0)

  # Add interactions
  interactions <- sample_interactions()
  interactions$occurrence_id <- paste0("test-", 1:nrow(interactions))
  save_records_to_db(db_path, doc_id, interactions, list())

  stats <- get_db_stats(db_path)
  expect_equal(stats$documents, 1)
  expect_equal(stats$interactions, nrow(interactions))
})

test_that("get_db_stats handles missing database", {
  nonexistent_db <- tempfile(fileext = ".sqlite")

  stats <- get_db_stats(nonexistent_db)

  expect_equal(stats$documents, 0)
  expect_equal(stats$interactions, 0)
  expect_match(stats$message, "not found")
})

test_that("get_document_content retrieves OCR content", {
  db_path <- local_test_db()
  

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  # Insert test document with content
  DBI::dbExecute(con, "
    INSERT INTO documents (file_name, file_path, file_hash, file_size, upload_timestamp, document_content)
    VALUES (?, ?, ?, ?, ?, ?)
  ", params = list("test.pdf", "/test/test.pdf", "hash123", 1000, Sys.time(), sample_ocr_content()))

  doc_id <- DBI::dbGetQuery(con, "SELECT last_insert_rowid() as id")$id

  content <- get_document_content(doc_id, con)

  expect_type(content, "character")
  expect_match(content, "Bat Ecology Study")
})

test_that("get_document_content returns NA when not found", {
  db_path <- local_test_db()
  

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  content <- get_document_content(99999, con)

  expect_true(is.na(content))
})

test_that("get_ocr_audit retrieves audit data", {
  db_path <- local_test_db()
  

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  # Insert test document with audit
  DBI::dbExecute(con, "
    INSERT INTO documents (file_name, file_path, file_hash, file_size, upload_timestamp, ocr_audit)
    VALUES (?, ?, ?, ?, ?, ?)
  ", params = list("test.pdf", "/test/test.pdf", "hash123", 1000, Sys.time(), sample_ocr_audit()))

  doc_id <- DBI::dbGetQuery(con, "SELECT last_insert_rowid() as id")$id

  audit <- get_ocr_audit(doc_id, con)

  expect_type(audit, "character")
  expect_match(audit, "quality_score")
})

test_that("get_existing_interactions retrieves interactions", {
  db_path <- local_test_db()
  

  test_file <- tempfile(fileext = ".pdf")
  writeLines("test", test_file)
  on.exit(unlink(test_file), add = TRUE)

  doc_id <- save_document_to_db(db_path, test_file, digest::digest(test_file), list())

  interactions <- sample_interactions()
  interactions$occurrence_id <- paste0("test-", 1:nrow(interactions))
  save_records_to_db(db_path, doc_id, interactions, list())

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  retrieved <- get_existing_interactions(doc_id, con)

  expect_s3_class(retrieved, "data.frame")
  expect_equal(nrow(retrieved), nrow(interactions))
})

test_that("get_existing_interactions returns NA when none found", {
  db_path <- local_test_db()
  

  con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
  on.exit(DBI::dbDisconnect(con), add = TRUE)

  result <- get_existing_interactions(99999, con)

  expect_true(is.na(result))
})
